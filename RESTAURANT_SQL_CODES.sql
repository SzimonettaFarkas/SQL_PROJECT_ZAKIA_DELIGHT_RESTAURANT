# RESTAURANT PROJECT


# creating a database
CREATE DATABASE RESTAURANT_PROJECT;
USE RESTAURANT_PROJECT;

# creating 3 tables
CREATE TABLE SALES_DATA (
ID INT,
FOOD_ID INT, 
ORDER_DATE DATE);

DESC SALES_DATA;

CREATE TABLE CUSTOMERS(
CUST_ID INT,
JOIN_DATE DATE);

DESC CUSTOMERS;

CREATE TABLE DISHES(
DISH_ID INT,
NAME VARCHAR(255),
PRICE FLOAT);

DESC DISHES;


# inserting data into the tables
INSERT INTO SALES_DATA VALUES
(1, 2, '2023-01-01'),
(1, 5, '2023-01-15'),
(1, 8, '2023-02-03'),
(2, 1, '2023-01-05'),
(2, 5, '2023-02-04'),
(3, 1, '2023-01-12'),
(3, 6, '2023-03-04'),
(3, 5, '2023-04-26'),
(3, 9, '2023-05-01'),
(3, 5, '2023-05-08'),
(4, 10, '2023-01-06'),
(4, 7, '2023-02-07'),
(4, 5, '2023-04-30'),
(5, 1, '2023-01-25'),
(5, 5, '2023-01-31'),
(5, 9, '2023-02-14'),
(5, 4, '2023-03-30'),
(5, 7, '2023-04-02'),
(5, 5, '2023-05-03'),
(6, 6, '2023-01-10'),
(6, 9, '2023-02-11'),
(6, 10, '2023-05-09'),
(7, 5, '2023-01-22'),
(7, 8, '2023-01-25'),
(7, 5, '2023-02-12'),
(7, 4, '2023-02-27'),
(7, 1, '2023-03-09'),
(7, 10, '2023-03-31'),
(7, 2, '2023-04-16'),
(7, 5, '2023-05-02'),
(8, 7, '2023-02-03'),
(8, 4, '2023-03-07'),
(8, 5, '2023-04-26'),
(8, 9, '2023-05-02'),
(9, 2, '2023-01-01'),
(9, 5, '2023-01-19'),
(9, 3, '2023-02-15'),
(9, 6, '2023-03-02'),
(9, 5, '2023-05-05'),
(10, 5, '2023-02-22'),
(10, 8, '2023-03-31'),
(10, 5, '2023-05-04');

SELECT * FROM SALES_DATA;

INSERT INTO CUSTOMERS VALUES
(1, '2023-02-01'),
(2, '2023-02-01'),
(3, '2023-02-15'),
(4, '2023-02-01'),
(5, '2023-02-01'),
(6, '2023-03-01'),
(7, '2023-03-01'),
(8, '2023-03-15'),
(9, '2023-02-15'),
(10, '2023-02-01');

SELECT * FROM CUSTOMERS;

INSERT INTO DISHES VALUES
(1, 'Chicken Stew', 8.50),
(2, 'Vegetable Stew', 7.00),
(3, 'Fruit Salad', 4.00),
(4, 'French Fries', 3.50),
(5, 'Hungarian Chicken Soup', 8.50),
(6, 'Cheeseburger with French Fries', 11.00),
(7, 'Vegetable Soup', 6.00),
(8, 'Greek Salad', 5.00),
(9, 'Beef - Vegetable Soup', 11.00),
(10, 'Cheesecake', 4.50);

SELECT * FROM DISHES;

# 1, Total amount each customer spent at the restaurant
SELECT SALES_DATA.ID, SUM(PRICE) AS TOTAL_AMOUNT FROM SALES_DATA
INNER JOIN DISHES ON SALES_DATA.FOOD_ID = DISHES.DISH_ID
GROUP BY SALES_DATA.ID;

# 2, How many days has each customer visited the restaurant?
SELECT * FROM SALES_DATA;
SELECT ID, COUNT(ORDER_DATE) AS DAYS FROM SALES_DATA
GROUP BY ID;

# 3, What was the first dish purchased by each customer?
SELECT ID, FOOD_ID, NAME 
FROM (SELECT ID, FOOD_ID, NAME, DISH_ID,
ROW_NUMBER() OVER(PARTITION BY SALES_DATA.ID ORDER BY ORDER_DATE) AS RN
FROM SALES_DATA
INNER JOIN DISHES 
ON SALES_DATA.FOOD_ID = DISHES.DISH_ID) AS DISH
WHERE RN = 1;

# 4, What is the most purchased dish? How many times was it purchased by all customers?
SELECT DISHES.NAME, COUNT(SALES_DATA.FOOD_ID) AS TOTAL_PURCHASES 
FROM SALES_DATA 
INNER JOIN DISHES ON SALES_DATA.FOOD_ID = DISHES.DISH_ID
GROUP BY DISHES.NAME
ORDER BY TOTAL_PURCHASES DESC
LIMIT 1;

# 5, Which dish was the most popular for each customer?
WITH DISH AS (
SELECT ID, NAME, COUNT(DISH_ID) AS PURCHASES,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY COUNT(ID) DESC) AS NUM
FROM SALES_DATA
INNER JOIN DISHES ON SALES_DATA.FOOD_ID = DISHES.DISH_ID
GROUP BY ID, NAME)

SELECT ID, NAME, PURCHASES
FROM DISH WHERE NUM = 1;

# 6, Which dish was ordered first by customers after becoming a member?
WITH FOOD AS (
SELECT ID, NAME, ORDER_DATE, JOIN_DATE, 
ROW_NUMBER() OVER(PARTITION BY ID) AS RN
FROM SALES_DATA 
INNER JOIN DISHES ON SALES_DATA.FOOD_ID = DISHES.DISH_ID
INNER JOIN CUSTOMERS ON SALES_DATA.ID = CUSTOMERS.CUST_ID
WHERE ORDER_DATE > JOIN_DATE)

SELECT ID, NAME, ORDER_DATE, JOIN_DATE
FROM FOOD 
WHERE RN = 1;


# What is the total number of dishes ordered by each customer 
# and how much they spent before they became a member?
SELECT ID, COUNT(FOOD_ID) AS NUMBER_OF_DISHES, SUM(PRICE) AS TOTAL_SPENT
FROM SALES_DATA
INNER JOIN DISHES ON SALES_DATA.FOOD_ID = DISHES.DISH_ID
INNER JOIN CUSTOMERS ON SALES_DATA.ID = CUSTOMERS.CUST_ID
WHERE ORDER_DATE < JOIN_DATE
GROUP BY ID;


# EACH â‚¬1 SPENT BRINGS 10 POINTS AND CHEESEBURGER WITH FRENCH FRIES BRINGS 20 
# POINTS, HOW MANY POINTS WOULD EACH CUSTOMER HAVE?

SELECT ID, SUM( CASE WHEN
NAME = 'Cheeseburger with French Fries' THEN PRICE * 20
ELSE PRICE * 10 END) AS COLLECTED_POINTS
FROM SALES_DATA 
INNER JOIN DISHES ON SALES_DATA.FOOD_ID = DISHES.DISH_ID
INNER JOIN CUSTOMERS ON SALES_DATA.ID = CUSTOMERS.CUST_ID
WHERE ORDER_DATE > JOIN_DATE
GROUP BY ID;


# What was the latest dish purchased by each customer before becoming a member?
WITH LAST_FOOD AS (SELECT ID, NAME, FOOD_ID, JOIN_DATE, ORDER_DATE,
ROW_NUMBER() OVER(PARTITION BY ID ORDER BY ORDER_DATE DESC) AS RN FROM SALES_DATA
INNER JOIN DISHES ON SALES_DATA.FOOD_ID = DISHES.DISH_ID
INNER JOIN CUSTOMERS ON SALES_DATA.ID = CUSTOMERS.CUST_ID
WHERE ORDER_DATE < JOIN_DATE)

SELECT ID, NAME 
FROM LAST_FOOD
WHERE RN = 1;


# 10. IN THE FIRST WEEK AFTER A CUSTOMER JOINS THE PROGRAM THEY EARN 2X POINTS ON ALL ITEMS (NOT ONLY 
# CHEESEBURGER WITH FRENCH FRIES . HOW MANY POINTS DO CUSTOMERS HAVE AT THE END OF JANUARY?

SELECT ID, SUM(CASE
    WHEN ORDER_DATE BETWEEN JOIN_DATE AND JOIN_DATE +  '7 day' 
    THEN PRICE * 20
    WHEN DISH_ID = 6 THEN PRICE * 20
    ELSE PRICE * 10 END) AS POINTS
FROM SALES_DATA 
INNER JOIN CUSTOMERS ON CUSTOMERS.CUST_ID = SALES_DATA.ID
INNER JOIN DISHES ON DISHES.DISH_ID = SALES_DATA.FOOD_ID
WHERE ORDER_DATE <= '2023-01-31'
GROUP BY ID
ORDER BY ID;